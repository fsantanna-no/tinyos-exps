@define(FORWARD_COUNT,   12)
@define(CLIENT_COUNT,     1)
@define(SRP_MAX_PATHLEN, 10)

C
    _message_t      = 52,
    _nx_am_addr_t   = 2,
    _sr_header_t    = sizeof<u8,u8,u8,u8> + sizeof<u16>*SRP_MAX_PATHLEN,
    _srp_send_t     = sizeof<_message_t*,u16*,u8,u8,u8>,
    _srp_senddone_t = sizeof<_message_t*,u8>,
    _srp_receive_t  = sizeof<_message_t**,u8>,
    _srp_forward_t  = sizeof<_message_t,u8>;
    C do
        typedef struct {
            message_t** msg;
            u8          len;
            u8          gotcha;
        } srp_forward_t;
    end

C pure
    _getSRPHeader(),
    _SourceRouteId_fetch(),
    _SourceRoutePacket_getNextHop(),
    _SourceRouteSend_getPayload();

C nohold
    _Receive_receive(),          // client is supposed not to hold
    _SourceRoutePacket_setRoute();

C
    _SourceRouteSend_sendDone(),
    _SubSend_send();

input void              SRP_START;
input void              SRP_STOP;
input _srp_send_t*      SRP_SEND;
input _srp_senddone_t*  SRP_SENDDONE;
input _srp_receive_t*   SRP_RECEIVE;

interface Global with
    event _srp_forward_t* go_forward;
end

event _srp_forward_t* go_forward;

class Client with
    var u8 id;
do
    var u8 seqno = 0;

    loop do
        tmp _srp_send_t* snd;

        // TODO
        loop do
            snd = await SRP_SEND;
            if snd:client == this.id then
                break;
            end
        end

        tmp _nx_am_addr_t[SRP_MAX_PATHLEN] nxPath;
        loop i, snd:pathLen do
            nxPath[i] = snd:path[i];
        end
        _SourceRoutePacket_setRoute(snd:msg, nxPath, snd:pathLen);

        tmp _sr_header_t* hdr = _getSRPHeader(snd:msg);
        hdr:payload_id = 1;
        hdr:payload_id = _SourceRouteId_fetch(this.id);
        hdr:seqno      = seqno;
        hdr:hops_left  = snd:pathLen - 2;

        seqno = seqno + 1;

        tmp _srp_senddone_t* done;

        loop do
            var _message_t* snd_msg = snd:msg;
            _SubSend_send(_SourceRoutePacket_getNextHop(snd:msg),
                          snd:msg, snd:len + sizeof<_sr_header_t>)
                finalize with nothing; end;  // msg is global

            // TODO
            done = await SRP_SENDDONE;
            if done:msg == snd_msg then
                break;
            end
        end

        _SourceRouteSend_sendDone(this.id, done:msg, done:error)
            finalize with nothing; end;     // msg is global
    end
end

class Forwarder with
    var _message_t* msg;
do
    loop do
        tmp _srp_forward_t* fwd = await global:go_forward;
        if fwd:gotcha then
            continue;
        end
        fwd:gotcha = 1;

        finalize
            msg = *(fwd:msg);
        with
            nothing;        // swaping buffers
        end
        *(fwd:msg) = msg;

        tmp _srp_senddone_t* done;
        tmp u8 len = fwd:len;

        loop do
            _SubSend_send(_SourceRoutePacket_getNextHop(msg),
                          msg, len)
                finalize with nothing; end;     // msg is global

            // TODO
            done = await SRP_SENDDONE;
            if done:msg == msg then
                break;
            end
        end
    end
end

var _message_t [FORWARD_COUNT] msgs_buf;
var _message_t*[FORWARD_COUNT] msgs;

loop i, FORWARD_COUNT do
    msgs[i] = &msgs_buf[i];
end

    await SRP_START;
loop do

    par/or do
        await SRP_STOP;
    with
        var Client   [CLIENT_COUNT]  clients;
        var Forwarder[FORWARD_COUNT] forwarders;

        loop i, CLIENT_COUNT do
            clients[i].id = i;
        end

        loop i, FORWARD_COUNT do
            forwarders[i].msg = msgs[i];
        end

        loop do
            tmp _srp_receive_t* recv = await SRP_RECEIVE;

            tmp _sr_header_t* hdr = _getSRPHeader(*(recv:msg));

            if hdr:hops_left == 0 then
                _Receive_receive(hdr:payload_id, *(recv:msg),
                                  _SourceRouteSend_getPayload(0, *(recv:msg),
                                        recv:len - sizeof<_sr_header_t>),
                                  recv:len - sizeof<_sr_header_t>);
            else
                hdr:hops_left = hdr:hops_left - 1;
                tmp _srp_forward_t fwd;
                    fwd.msg    = recv:msg;
                    fwd.len    = recv:len;
                    fwd.gotcha = 0;
                emit go_forward=&fwd;
            end
        end
    end
end
