@define(AWAIT, `
loop do
    tmp int id_ = await $1;
    if id_ == this.id then
        break;
    end
end
')
class Trickle with
    var u8 id;
do
    loop do
        var u16 tau = _TRICKLE_TAU_H;
        par/or do
            loop do
                AWAIT (TRICKLE_RESET);
                tau = _TRICKLE_TAU_L;
            end
        with
            AWAIT (TRICKLE_START);
            par/or do
                AWAIT (TRICKLE_STOP);
                tau = _TRICKLE_TAU_H;
            with
                loop do
                    var u8 count = 0;
                    par/or do
                        await (tau << (_TRICKLE_SCALE - 1)) ms;
                        tau = tau * 2;
                        if tau > _TRICKLE_TAU_H then
                            tau = _TRICKLE_TAU_H;
                        end
                    with
                        AWAIT (TRICKLE_RESET);
                    with
                        loop do
                            AWAIT (TRICKLE_INC);
                            count = count + 1;
                        end
                    with
                        tmp u16 dt_ = (tau / 2) + (_Random_rand16 () + 1)
                                         % (tau / 2);
                        await (dt_ << (_TRICKLE_SCALE - 1)) ms;
                        if count < _TRICKLE_K then
                            emit TRICKLE_FIRED (this.id);
                        end
                        await FOREVER;
                    end
                end
            end
        end
    end
end
var Trickle [NUM_TRICKLES] trickles;
loop i, NUM_TRICKLES do
    trickles [i] .id = i;
end
await FOREVER;
