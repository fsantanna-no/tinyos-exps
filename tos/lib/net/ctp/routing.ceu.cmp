event void go_start;
event void go_stop;
_glb_state_is_root = 0;
_routeInfoInit (& _glb_routeInfo);
_routingTableInit ();
par do
    loop do
        await go_start;
        var u32 currentInterval = _CTP_ROUTE_MIN_INTERVAL;
        par/or do
            await go_stop;
        with
            loop do
                await (_BEACON_INTERVAL) ms;
                _task_updateRouteTask ();
            end
        with
            loop do
                par/or do
                    par/or do
loop do
    tmp _message_t* msg = await CTP_ROUTE_RADIO_RECEIVE;
    if _BeaconSend_payloadLength (msg) == sizeof <_ctp_routing_header_t> then
        tmp _am_addr_t from = _AMPacket_source (msg);
        tmp _ctp_routing_header_t* pay = _BeaconSend_getPayload (msg, 
            sizeof<_ctp_routing_header_t>);
        tmp s8 congested? = _CtpRoutingPacket_getOption (msg, _CTP_OPT_ECN);
        if pay:parent != _INVALID_ADDR then
            if pay:etx == 0 then
                _LinkEstimator_insertNeighbor (from);
                _LinkEstimator_pinNeighbor (from);
            end
            _routingTableUpdateEntry (from, pay:parent, pay:etx);
            _CtpInfo_setNeighborCongested (from, congested?);
        end
        if _CtpRoutingPacket_getOption (msg, _CTP_OPT_PULL) then
            break;
        end
    end
end
                    with
                        await CTP_ROUTE_UPDATE;
                    with
                        await CTP_ROUTE_IMMEDIATE_UPDATE;
                    end
                    currentInterval = _CTP_ROUTE_MIN_INTERVAL;
                with
                    var u32 t = currentInterval;
                    t = t / 2;
                    t = t + _Random_rand32 () % t;
                    await (t) ms;
                    par/and do
                        await (currentInterval - t) ms;
                    with
                        _task_updateRouteTask ();
                        var _message_t             msg;
                        tmp _ctp_routing_header_t* pay =
                            _BeaconSend_getPayload(& msg, _BeaconSend_maxPayloadLength ());
                        pay:options = 0;
                        if _CtpCongestion_isCongested () then
                            pay:options = pay:options | _CTP_OPT_ECN;
                        end
                        pay:parent = _glb_routeInfo.parent;
                        if _glb_state_is_root then
                            pay:etx = _glb_routeInfo.etx;
                        else/if _glb_routeInfo.parent == _INVALID_ADDR then
                            pay:etx = _glb_routeInfo.etx;
                            pay:options = pay:options | _CTP_OPT_PULL;
                        else
                            pay:etx = _glb_routeInfo.etx +
                                _LinkEstimator_getLinkQuality (_glb_routeInfo.parent);
                        end
                        tmp u8 eval = _BeaconSend_send(_AM_BROADCAST_ADDR, & msg,
                                                    sizeof <_ctp_routing_header_t>);
                        if eval == _SUCCESS then
                            await CTP_ROUTE_RADIO_SENDDONE;
                        else/if eval == _EOFF then
                            emit go_stop;
                        end
                    end
                    currentInterval = currentInterval * 2;
                    if currentInterval > _CTP_ROUTE_MAX_INTERVAL then
                        currentInterval = _CTP_ROUTE_MAX_INTERVAL;
                    end
                end
            end
        end
    end
with
    var s8 ctp?   = 0;
    var s8 radio? = 0;
    loop do
        par/or do
            await CTP_ROUTE_START;
            ctp? = 1;
        with
            await CTP_ROUTE_STOP;
            ctp? = 0;
        with
            await CTP_ROUTE_RADIO_STARTDONE;
            radio? = 1;
        with
            await CTP_ROUTE_RADIO_STOPDONE;
            radio? = 0;
        end
        if ctp? and radio? then
            emit go_start;
        else
            emit go_stop;
        end
    end
end
