#include <Timer.h>
#include <TreeRouting.h>
#include <CollectionDebugMsg.h>
generic module CtpRoutingEngineP(uint8_t routingTableSize, uint32_t minInterval, uint32_t maxInterval) {
    provides {
        interface UnicastNameFreeRouting as Routing;
        interface RootControl;
        interface CtpInfo;
        interface StdControl;
        interface CtpRoutingPacket;
        interface Init;
    } 
    uses {
        interface AMSend as BeaconSend;
        interface Receive as BeaconReceive;
        interface LinkEstimator;
        interface AMPacket;
        interface SplitControl as RadioControl;
        interface Timer<TMilli> as BeaconTimer;
        interface Timer<TMilli> as RouteTimer;
        interface Random;
        interface CollectionDebug;
        interface CtpCongestion;

	interface CompareBit;

    }
}

implementation
{
    typedef int64_t  s64;
    typedef uint64_t u64;
    typedef int32_t  s32;
    typedef uint32_t u32;
    typedef int16_t  s16;
    typedef uint16_t u16;
    typedef int8_t    s8;
    typedef uint8_t   u8;

    #define CTP_ROUTE_MIN_INTERVAL minInterval
    #define CTP_ROUTE_MAX_INTERVAL maxInterval

    #define AMPacket_source(a) \
                call AMPacket.source(a)
    #define CtpRoutingPacket_getOption(a,b) \
                call CtpRoutingPacket.getOption(a,b)
    #define BeaconSend_send(a,b,c) \
                call BeaconSend.send(a,b,c)
    #define BeaconSend_getPayload(a,b) \
                call BeaconSend.getPayload(a,b)
    //#define BeaconSend_payloadLength(a)
                //call BeaconSend.payloadLength(a)
    #define BeaconSend_maxPayloadLength(a) \
                call BeaconSend.maxPayloadLength(a)
    #define Random_rand32() \
                call Random.rand32()
    #define LinkEstimator_getLinkQuality(a) \
                call LinkEstimator.getLinkQuality(a)
    #define CtpCongestion_isCongested() \
                call CtpCongestion.isCongested()
    #define LinkEstimator_insertNeighbor(a) \
                call LinkEstimator.insertNeighbor(a)
    #define LinkEstimator_pinNeighbor(a) \
                call LinkEstimator.pinNeighbor(a)
    #define CtpInfo_setNeighborCongested(a,b) \
                call CtpInfo.setNeighborCongested(a,b)
    #define task_updateRouteTask() \
                post updateRouteTask()

    #define ceu_out_wclock(us) \
        call RouteTimer.startOneShot(us/1000)

    // forward declarations
    void routingTableInit();
    uint8_t routingTableFind(am_addr_t);
    error_t routingTableUpdateEntry(am_addr_t, am_addr_t , uint16_t);
    error_t routingTableEvict(am_addr_t neighbor);
    task void updateRouteTask();

    route_info_t glb_routeInfo;
    bool         glb_state_is_root;

    #include "_ceu_defs.h"
    #include "_ceu_code.cceu"

    command error_t Init.init() {
        ceu_go_init();
        return SUCCESS;
    }

    command error_t StdControl.start() {
        ceu_go_event(IN_CTP_ROUTE_START, NULL);
        return SUCCESS;
    }

    command error_t StdControl.stop() {
        ceu_go_event(IN_CTP_ROUTE_STOP, NULL);
        return SUCCESS;
    }

    event void RadioControl.startDone(error_t error) {
        ceu_go_event(IN_CTP_ROUTE_RADIO_STARTDONE, &error);
    }

    event void RadioControl.stopDone(error_t error) {
        ceu_go_event(IN_CTP_ROUTE_RADIO_STOPDONE, &error);
    }

    event void BeaconSend.sendDone(message_t* msg, error_t error) {
        ceu_go_event(IN_CTP_ROUTE_RADIO_SENDDONE, &error);
    }

    event void RouteTimer.fired() {
        ceu_go_wclock(call RouteTimer.getdt()*1000);
    }

    event void BeaconTimer.fired() {
        // TODO: not used
    }

    event message_t* BeaconReceive.receive(message_t* msg, void* payload, uint8_t len) {
        ceu_go_event(IN_CTP_ROUTE_RADIO_RECEIVE, msg);
        return msg;
    }

    command void CtpInfo.triggerRouteUpdate() {
        ceu_go_event(IN_CTP_ROUTE_UPDATE, NULL);
    }
    command void CtpInfo.triggerImmediateRouteUpdate() {
        ceu_go_event(IN_CTP_ROUTE_IMMEDIATE_UPDATE, NULL);
    }

    bool ECNOff = TRUE;
    bool justEvicted = FALSE;

    routing_table_entry routingTable[routingTableSize];
    uint8_t routingTableActive;

    // forward declarations
    void routingTableInit();
    uint8_t routingTableFind(am_addr_t);
    error_t routingTableUpdateEntry(am_addr_t, am_addr_t , uint16_t);
    error_t routingTableEvict(am_addr_t neighbor);

    /* Is this quality measure better than the minimum threshold? */
    // Implemented assuming quality is EETX
    bool passLinkEtxThreshold(uint16_t etx) {
        return (etx < ETX_THRESHOLD);
    }

    /* updates the routing information, using the info that has been received
     * from neighbor beacons. Two things can cause this info to change: 
     * neighbor beacons, changes in link estimates, including neighbor eviction */
    task void updateRouteTask() {
        uint8_t i;
        routing_table_entry* entry;
        routing_table_entry* best;
        uint16_t minEtx;
        uint16_t currentEtx;
        uint16_t linkEtx, pathEtx;

        if (glb_state_is_root)
            return;
       
        best = NULL;
        /* Minimum etx found among neighbors, initially infinity */
        minEtx = MAX_METRIC;
        /* Metric through current parent, initially infinity */
        currentEtx = MAX_METRIC;

        dbg("TreeRouting","%s\n",__FUNCTION__);

        /* Find best path in table, other than our current */
        for (i = 0; i < routingTableActive; i++) {
            entry = &routingTable[i];

            // Avoid bad entries and 1-hop loops
            if (entry->info.parent == INVALID_ADDR || entry->info.parent == call AMPacket.address()) {
              dbg("TreeRouting", 
                  "routingTable[%d]: neighbor: [id: %d parent: %d  etx: NO ROUTE]\n",  
                  i, entry->neighbor, entry->info.parent);
              continue;
            }

            linkEtx = call LinkEstimator.getLinkQuality(entry->neighbor);
            dbg("TreeRouting", 
                "routingTable[%d]: neighbor: [id: %d parent: %d etx: %d retx: %d]\n",  
                i, entry->neighbor, entry->info.parent, linkEtx, entry->info.etx);
            pathEtx = linkEtx + entry->info.etx;
            /* Operations specific to the current parent */
            if (entry->neighbor == glb_routeInfo.parent) {
                dbg("TreeRouting", "   already parent.\n");
                currentEtx = pathEtx;
                /* update glb_routeInfo with parent's current info */
		glb_routeInfo.etx = entry->info.etx;
		glb_routeInfo.congested = entry->info.congested;
                continue;
            }
            /* Ignore links that are congested */
            if (entry->info.congested)
                continue;
            /* Ignore links that are bad */
            if (!passLinkEtxThreshold(linkEtx)) {
              dbg("TreeRouting", "   did not pass threshold.\n");
              continue;
            }
            
            if (pathEtx < minEtx) {
	      dbg("TreeRouting", "   best is %d, setting to %d\n", pathEtx, entry->neighbor);
                minEtx = pathEtx;
                best = entry;
            }  
        }

        //call CollectionDebug.logEventDbg(NET_C_DBG_3, glb_routeInfo.parent, currentEtx, minEtx);

        /* Now choose between the current parent and the best neighbor */
        /* Requires that: 
            1. at least another neighbor was found with ok quality and not congested
            2. the current parent is congested and the other best route is at least as good
            3. or the current parent is not congested and the neighbor quality is better by 
               the PARENT_SWITCH_THRESHOLD.
          Note: if our parent is congested, in order to avoid forming loops, we try to select
                a node which is not a descendent of our parent. glb_routeInfo.ext is our parent's
                etx. Any descendent will be at least that + 10 (1 hop), so we restrict the 
                selection to be less than that.
        */
        if (minEtx != MAX_METRIC) {
            if (currentEtx == MAX_METRIC ||
                (glb_routeInfo.congested && (minEtx < (glb_routeInfo.etx + 10))) ||
                minEtx + PARENT_SWITCH_THRESHOLD < currentEtx) {
                // glb_routeInfo.metric will not store the composed metric.
                // since the linkMetric may change, we will compose whenever
                // we need it: i. when choosing a parent (here); 
                //            ii. when choosing a next hop

                dbg("TreeRouting","Changed parent. from %d to %d\n", glb_routeInfo.parent, best->neighbor);
                call CollectionDebug.logEventDbg(NET_C_TREE_NEW_PARENT, best->neighbor, best->info.etx, minEtx);
                call LinkEstimator.unpinNeighbor(glb_routeInfo.parent);
                call LinkEstimator.pinNeighbor(best->neighbor);
                call LinkEstimator.clearDLQ(best->neighbor);

		glb_routeInfo.parent = best->neighbor;
		glb_routeInfo.etx = best->info.etx;
		glb_routeInfo.congested = best->info.congested;
		if (currentEtx - minEtx > 20) {
		  call CtpInfo.triggerRouteUpdate();
		}
            }
        }    

        /* Finally, tell people what happened:  */
        /* We can only loose a route to a parent if it has been evicted. If it hasn't 
         * been just evicted then we already did not have a route */
        if (justEvicted && glb_routeInfo.parent == INVALID_ADDR)
            signal Routing.noRoute();
        /* On the other hand, if we didn't have a parent (no currentEtx) and now we
         * do, then we signal route found. The exception is if we just evicted the 
         * parent and immediately found a replacement route: we don't signal in this 
         * case */
        else if (!justEvicted && 
                  currentEtx == MAX_METRIC &&
                  minEtx != MAX_METRIC)
            signal Routing.routeFound();
        justEvicted = FALSE; 
    }

    ctp_routing_header_t* getHeader(message_t* ONE m) {
      return (ctp_routing_header_t*)call BeaconSend.getPayload(m, call BeaconSend.maxPayloadLength());
    }
    
    /* Signals that a neighbor is no longer reachable. need special care if
     * that neighbor is our parent */
    event void LinkEstimator.evicted(am_addr_t neighbor) {
        routingTableEvict(neighbor);
        dbg("TreeRouting","%s\n",__FUNCTION__);
        if (glb_routeInfo.parent == neighbor) {
            routeInfoInit(&glb_routeInfo);
            justEvicted = TRUE;
            post updateRouteTask();
        }
    }

    /* Interface UnicastNameFreeRouting */
    /* Simple implementation: return the current glb_routeInfo */
    command am_addr_t Routing.nextHop() {
        return glb_routeInfo.parent;
    }
    command bool Routing.hasRoute() {
        return (glb_routeInfo.parent != INVALID_ADDR);
    }
   
    /* CtpInfo interface */
    command error_t CtpInfo.getParent(am_addr_t* parent) {
        if (parent == NULL) 
            return FAIL;
        if (glb_routeInfo.parent == INVALID_ADDR)
            return FAIL;
        *parent = glb_routeInfo.parent;
        return SUCCESS;
    }

    command error_t CtpInfo.getEtx(uint16_t* etx) {
        if (etx == NULL) 
            return FAIL;
        if (glb_routeInfo.parent == INVALID_ADDR)
            return FAIL;
	if (glb_state_is_root == 1) {
	  *etx = 0;
	} else {
	  *etx = glb_routeInfo.etx + call LinkEstimator.getLinkQuality(glb_routeInfo.parent);
	}
        return SUCCESS;
    }

    command void CtpInfo.recomputeRoutes() {
      post updateRouteTask();
    }

    command void CtpInfo.setNeighborCongested(am_addr_t n, bool congested) {
        uint8_t idx;    
        if (ECNOff)
            return;
        idx = routingTableFind(n);
        if (idx < routingTableActive) {
            routingTable[idx].info.congested = congested;
        }
        if (glb_routeInfo.congested && !congested)
            post updateRouteTask();
        else if (glb_routeInfo.parent == n && congested)
            post updateRouteTask();
    }

    command bool CtpInfo.isNeighborCongested(am_addr_t n) {
        uint8_t idx;    

        if (ECNOff) 
            return FALSE;

        idx = routingTableFind(n);
        if (idx < routingTableActive) {
            return routingTable[idx].info.congested;
        }
        return FALSE;
    }
    
    /* RootControl interface */
    /** sets the current node as a root, if not already a root */
    /*  returns FAIL if it's not possible for some reason      */
    command error_t RootControl.setRoot() {
        bool route_found = FALSE;
        route_found = (glb_routeInfo.parent == INVALID_ADDR);
	glb_state_is_root = 1;
	glb_routeInfo.parent = call AMPacket.address(); //myself
	glb_routeInfo.etx = 0;

        if (route_found) 
            signal Routing.routeFound();
        dbg("TreeRouting","%s I'm a root now!\n",__FUNCTION__);
        call CollectionDebug.logEventRoute(NET_C_TREE_NEW_PARENT, glb_routeInfo.parent, 0, glb_routeInfo.etx);
        return SUCCESS;
    }

    command error_t RootControl.unsetRoot() {
      glb_state_is_root = 0;
      routeInfoInit(&glb_routeInfo);

      dbg("TreeRouting","%s I'm not a root now!\n",__FUNCTION__);
      post updateRouteTask();
      return SUCCESS;
    }

    command bool RootControl.isRoot() {
        return glb_state_is_root;
    }

    default event void Routing.noRoute() {
    }
    
    default event void Routing.routeFound() {
    }


  /* The link will be recommended for insertion if it is better* than some
   * link in the routing table that is not our parent.
   * We are comparing the path quality up to the node, and ignoring the link
   * quality from us to the node. This is because of a couple of things:
   *   1. we expect this call only for links with white bit set
   *   2. we are being optimistic to the nodes in the table, by ignoring the
   *      1-hop quality to them (which means we are assuming it's 1 as well)
   *      This actually sets the bar a little higher for replacement
   *   3. this is faster
   */
    event bool CompareBit.shouldInsert(message_t *msg, void* payload, uint8_t len) {
        
        bool found = FALSE;
        uint16_t pathEtx;
        uint16_t neighEtx;
        int i;
        routing_table_entry* entry;
        ctp_routing_header_t* rcvBeacon;

        if ((call AMPacket.type(msg) != AM_CTP_ROUTING) ||
            (len != sizeof(ctp_routing_header_t))) 
            return FALSE;

        /* 1.determine this packet's path quality */
        rcvBeacon = (ctp_routing_header_t*)payload;

        if (rcvBeacon->parent == INVALID_ADDR)
            return FALSE;
        /* the node is a root, recommend insertion! */
        if (rcvBeacon->etx == 0) {
            return TRUE;
        }
    
        pathEtx = rcvBeacon->etx; // + linkEtx;

        /* 2. see if we find some neighbor that is worse */
        for (i = 0; i < routingTableActive && !found; i++) {
            entry = &routingTable[i];
            //ignore parent, since we can't replace it
            if (entry->neighbor == glb_routeInfo.parent)
                continue;
            neighEtx = entry->info.etx;
            found |= (pathEtx < neighEtx); 
        }
        return found;
    }


    /************************************************************/
    /* Routing Table Functions                                  */

    /* The routing table keeps info about neighbor's route_info,
     * and is used when choosing a parent.
     * The table is simple: 
     *   - not fragmented (all entries in 0..routingTableActive)
     *   - not ordered
     *   - no replacement: eviction follows the LinkEstimator table
     */

    void routingTableInit() {
        routingTableActive = 0;
    }

    /* Returns the index of parent in the table or
     * routingTableActive if not found */
    uint8_t routingTableFind(am_addr_t neighbor) {
        uint8_t i;
        if (neighbor == INVALID_ADDR)
            return routingTableActive;
        for (i = 0; i < routingTableActive; i++) {
            if (routingTable[i].neighbor == neighbor)
                break;
        }
        return i;
    }


    error_t routingTableUpdateEntry(am_addr_t from, am_addr_t parent, uint16_t etx)    {
        uint8_t idx;
        uint16_t  linkEtx;
        linkEtx = call LinkEstimator.getLinkQuality(from);

        idx = routingTableFind(from);
        if (idx == routingTableSize) {
            //not found and table is full
            //if (passLinkEtxThreshold(linkEtx))
                //TODO: add replacement here, replace the worst
            //}
            dbg("TreeRouting", "%s FAIL, table full\n", __FUNCTION__);
            return FAIL;
        }
        else if (idx == routingTableActive) {
            //not found and there is space
            if (passLinkEtxThreshold(linkEtx)) {
	      routingTable[idx].neighbor = from;
	      routingTable[idx].info.parent = parent;
	      routingTable[idx].info.etx = etx;
	      routingTable[idx].info.haveHeard = 1;
	      routingTable[idx].info.congested = FALSE;
	      routingTableActive++;
	      dbg("TreeRouting", "%s OK, new entry\n", __FUNCTION__);
            } else {
                dbg("TreeRouting", "%s Fail, link quality (%hu) below threshold\n", __FUNCTION__, linkEtx);
            }
        } else {
            //found, just update
	  routingTable[idx].neighbor = from;
	  routingTable[idx].info.parent = parent;
	  routingTable[idx].info.etx = etx;
	  routingTable[idx].info.haveHeard = 1;
	  dbg("TreeRouting", "%s OK, updated entry\n", __FUNCTION__);
        }
        return SUCCESS;
    }

    /* if this gets expensive, introduce indirection through an array of pointers */
    error_t routingTableEvict(am_addr_t neighbor) {
        uint8_t idx,i;
        idx = routingTableFind(neighbor);
        if (idx == routingTableActive) 
            return FAIL;
        routingTableActive--;
        for (i = idx; i < routingTableActive; i++) {
            routingTable[i] = routingTable[i+1];    
        } 
        return SUCCESS; 
    }
    /*********** end routing table functions ***************/

    /* Default implementations for CollectionDebug calls.
     * These allow CollectionDebug not to be wired to anything if debugging
     * is not desired. */

    default command error_t CollectionDebug.logEvent(uint8_t type) {
        return SUCCESS;
    }
    default command error_t CollectionDebug.logEventSimple(uint8_t type, uint16_t arg) {
        return SUCCESS;
    }
    default command error_t CollectionDebug.logEventDbg(uint8_t type, uint16_t arg1, uint16_t arg2, uint16_t arg3) {
        return SUCCESS;
    }
    default command error_t CollectionDebug.logEventMsg(uint8_t type, uint16_t msg, am_addr_t origin, am_addr_t node) {
        return SUCCESS;
    }
    default command error_t CollectionDebug.logEventRoute(uint8_t type, am_addr_t parent, uint8_t hopcount, uint16_t etx) {
        return SUCCESS;
    }

    command bool CtpRoutingPacket.getOption(message_t* msg, ctp_options_t opt) {
dbg("TreeRouting", "GET: %p\n", getHeader(msg));
dbg("TreeRouting", "GET: %p\n", &getHeader(msg)->options);
dbg("TreeRouting", "GET: %d\n", getHeader(msg)->options);
      return ((getHeader(msg)->options & opt) == opt) ? TRUE : FALSE;
    }

    command void CtpRoutingPacket.setOption(message_t* msg, ctp_options_t opt) {
      getHeader(msg)->options |= opt;
    }

    command void CtpRoutingPacket.clearOption(message_t* msg, ctp_options_t opt) {
      getHeader(msg)->options &= ~opt;
    }

    command void CtpRoutingPacket.clearOptions(message_t* msg) {
      getHeader(msg)->options = 0;
    }

    
    command am_addr_t     CtpRoutingPacket.getParent(message_t* msg) {
      return getHeader(msg)->parent;
    }
    command void          CtpRoutingPacket.setParent(message_t* msg, am_addr_t addr) {
      getHeader(msg)->parent = addr;
    }
    
    command uint16_t      CtpRoutingPacket.getEtx(message_t* msg) {
      return getHeader(msg)->etx;
    }
    command void          CtpRoutingPacket.setEtx(message_t* msg, uint16_t etx) {
      getHeader(msg)->etx = etx;
    }

    command uint8_t CtpInfo.numNeighbors() {
      return routingTableActive;
    }
    command uint16_t CtpInfo.getNeighborLinkQuality(uint8_t n) {
      return (n < routingTableActive)? call LinkEstimator.getLinkQuality(routingTable[n].neighbor):0xffff;
    }
    command uint16_t CtpInfo.getNeighborRouteQuality(uint8_t n) {
      return (n < routingTableActive)? call LinkEstimator.getLinkQuality(routingTable[n].neighbor) + routingTable[n].info.etx:0xfffff;
    }
    command am_addr_t CtpInfo.getNeighborAddr(uint8_t n) {
      return (n < routingTableActive)? routingTable[n].neighbor:AM_BROADCAST_ADDR;
    }
    
} 
