  message_t m_buf;
  bool m_running;
  bool m_bufBusy;
  void sendProbe( uint16_t key );
  void sendObject( uint16_t key );
  command error_t StdControl.start() {
    uint8_t i;
    for ( i = 0; i < NUM_DISSEMINATORS; i++ ) {
      call DisseminatorControl.start[ i ]();
    }
    m_running = TRUE;
  }
  command error_t StdControl.stop() {
    uint8_t i;
    for ( i = 0; i < NUM_DISSEMINATORS; i++ ) {
      call DisseminatorControl.stop[ i ]();
    }
    m_running = FALSE;
  }
  event error_t DisseminationCache.start[ uint16_t key ]() {
    error_t result = call TrickleTimer.start[ key ]();
    call TrickleTimer.reset[ key ]();
  }
  event error_t DisseminationCache.stop[ uint16_t key ]() {
    call TrickleTimer.stop[ key ]();
  }
  event void DisseminationCache.newData[ uint16_t key ]() {
    sendObject( key );
    call TrickleTimer.reset[ key ]();
  }
  event void TrickleTimer.fired[ uint16_t key ]() {
    sendObject( key );
  }
  void sendProbe( uint16_t key ) {
    dissemination_probe_message_t* dpMsg = 
      (dissemination_probe_message_t*) call ProbeAMSend.getPayload( &m_buf, sizeof(dissemination_probe_message_t));
    if (dpMsg != NULL) {
      m_bufBusy = TRUE;
      dpMsg->key = key;
      call ProbeAMSend.send( AM_BROADCAST_ADDR, &m_buf,
			     sizeof( dissemination_probe_message_t ) );
    }
  }
  void sendObject( uint16_t key ) {
    void* object;
    uint8_t objectSize = 0;
    dissemination_message_t* dMsg;
    dMsg = 
      (dissemination_message_t*) call AMSend.getPayload( &m_buf, sizeof(dissemination_message_t) );
    if (dMsg != NULL) {
      m_bufBusy = TRUE;
      dMsg->key = key;
      dMsg->seqno = call DisseminationCache.requestSeqno[ key ]();
      if ( dMsg->seqno != DISSEMINATION_SEQNO_UNKNOWN ) {
	object = call DisseminationCache.requestData[ key ]( &objectSize );
	if ((objectSize + sizeof(dissemination_message_t)) > 
	    call AMSend.maxPayloadLength()) {
	  objectSize = call AMSend.maxPayloadLength() - sizeof(dissemination_message_t);
	}
	memcpy( dMsg->data, object, objectSize );
      }      
      call AMSend.send( AM_BROADCAST_ADDR,
			&m_buf, sizeof( dissemination_message_t ) + objectSize );
    }
  }
  event void ProbeAMSend.sendDone( message_t* msg, error_t error ) {
    m_bufBusy = FALSE;
  }
  event void AMSend.sendDone( message_t* msg, error_t error ) {
    m_bufBusy = FALSE;
  }
  event message_t* Receive.receive( message_t* msg, 
				    void* payload, 
				    uint8_t len ) {
    dissemination_message_t* dMsg = 
      (dissemination_message_t*) payload;
    uint16_t key = dMsg->key;
    uint32_t incomingSeqno = dMsg->seqno;
    uint32_t currentSeqno = call DisseminationCache.requestSeqno[ key ]();
    if ( !m_running ) { return msg; }
    if ( currentSeqno == DISSEMINATION_SEQNO_UNKNOWN &&
	 incomingSeqno != DISSEMINATION_SEQNO_UNKNOWN ) {
      call DisseminationCache.storeData[ key ]
	( dMsg->data, 
	  len - sizeof( dissemination_message_t ),
	  incomingSeqno );
      
      call TrickleTimer.reset[ key ]();
      return msg;
    }
    if ( incomingSeqno == DISSEMINATION_SEQNO_UNKNOWN &&
	 currentSeqno != DISSEMINATION_SEQNO_UNKNOWN ) {
      call TrickleTimer.reset[ key ]();
      return msg;
    }
    if ( (int32_t)( incomingSeqno - currentSeqno ) > 0 ) {
      call DisseminationCache.storeData[key]
	( dMsg->data, 
	  len - sizeof(dissemination_message_t),
	  incomingSeqno );
      call TrickleTimer.reset[ key ]();
    } else if ( (int32_t)( incomingSeqno - currentSeqno ) == 0 ) {
      call TrickleTimer.incrementCounter[ key ]();
    } else {
      sendObject( key );
    }
    return msg;
  }
  event message_t* ProbeReceive.receive( message_t* msg, 
					 void* payload, 
					 uint8_t len) {
    dissemination_probe_message_t* dpMsg = 
      (dissemination_probe_message_t*) payload;
    if ( !m_running ) { return msg; }
    if ( call DisseminationCache.requestSeqno[ dpMsg->key ]() != 
	 DISSEMINATION_SEQNO_UNKNOWN ) {    
      sendObject( dpMsg->key );
    }
    return msg;
  }
