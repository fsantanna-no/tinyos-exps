  message_t m_buf;
  bool m_running;
  bool m_bufBusy;
  void sendProbe (uint16_t key);
  void sendObject (uint16_t key);
  error_t StdControl.start () {
    uint8_t i;
    for (i = 0; i < NUM_DISSEMINATORS; i++) {
      DisseminatorControl.start [i]();
    }
    m_running = TRUE;
  }
  error_t StdControl.stop () {
    uint8_t i;
    for (i = 0; i < NUM_DISSEMINATORS; i++) {
      DisseminatorControl.stop [i]();
    }
    m_running = FALSE;
  }
  event error_t DisseminationCache.start [uint16_t key]() {
    error_t result = TrickleTimer.start [key]();
    TrickleTimer.reset [key]();
  }
  event error_t DisseminationCache.stop [uint16_t key]() {
    TrickleTimer.stop [key]();
  }
  event void DisseminationCache.newData [uint16_t key]() {
    sendObject (key);
    TrickleTimer.reset [key]();
  }
  event void TrickleTimer.fired [uint16_t key]() {
    sendObject (key);
  }
  void sendProbe (uint16_t key) {
    dissemination_probe_message_t* dpMsg = 
      (dissemination_probe_message_t*) ProbeAMSend.getPayload (&m_buf, sizeof (dissemination_probe_message_t));
    if (dpMsg != NULL) {
      m_bufBusy = TRUE;
      dpMsg->key = key;
      ProbeAMSend.send (AM_BROADCAST_ADDR, &m_buf,
			     sizeof (dissemination_probe_message_t));
    }
  }
  void sendObject (uint16_t key) {
    void* object;
    uint8_t objectSize = 0;
    dissemination_message_t* dMsg;
    dMsg = 
      (dissemination_message_t*) AMSend.getPayload (&m_buf, sizeof (dissemination_message_t));
    if (dMsg != NULL) {
      m_bufBusy = TRUE;
      dMsg->key = key;
      dMsg->seqno = DisseminationCache.requestSeqno [key]();
      if (dMsg->seqno != DISSEMINATION_SEQNO_UNKNOWN) {
	object = DisseminationCache.requestData [key] (&objectSize);
	if ((objectSize + sizeof (dissemination_message_t))>
	    AMSend.maxPayloadLength ()) {
	  objectSize = AMSend.maxPayloadLength () - sizeof (dissemination_message_t);
	}
	memcpy (dMsg->data, object, objectSize);
      }      
      AMSend.send (AM_BROADCAST_ADDR,
			&m_buf, sizeof (dissemination_message_t) + objectSize);
    }
  }
  event void ProbeAMSend.sendDone (message_t* msg, error_t error) {
    m_bufBusy = FALSE;
  }
  event void AMSend.sendDone (message_t* msg, error_t error) {
    m_bufBusy = FALSE;
  }
  event message_t* Receive.receive (message_t* msg, 
				    void* payload, 
				    uint8_t len) {
    dissemination_message_t* dMsg = 
      (dissemination_message_t*) payload;
    uint16_t key = dMsg->key;
    uint32_t incomingSeqno = dMsg->seqno;
    uint32_t currentSeqno = DisseminationCache.requestSeqno [key]();
    if (! m_running) { return msg; }
    if (currentSeqno == DISSEMINATION_SEQNO_UNKNOWN &&
	 incomingSeqno != DISSEMINATION_SEQNO_UNKNOWN) {
      DisseminationCache.storeData [key]( dMsg->data, 
	  len - sizeof (dissemination_message_t),
	  incomingSeqno);
      TrickleTimer.reset [key]();
      return msg;
    }
    if (incomingSeqno == DISSEMINATION_SEQNO_UNKNOWN &&
	 currentSeqno != DISSEMINATION_SEQNO_UNKNOWN) {
      TrickleTimer.reset [key]();
      return msg;
    }
    if ((int32_t) (incomingSeqno - currentSeqno) > 0) {
      DisseminationCache.storeData [key]( dMsg->data, 
	  len - sizeof (dissemination_message_t),
	  incomingSeqno);
      TrickleTimer.reset [key]();
    } else if ((int32_t) (incomingSeqno - currentSeqno) == 0) {
      TrickleTimer.incrementCounter [key]();
    } else {
      sendObject (key);
    }
    return msg;
  }
  event message_t* ProbeReceive.receive (message_t* msg, 
					 void* payload,
					 uint8_t len) {
    dissemination_probe_message_t* dpMsg = 
      (dissemination_probe_message_t*) payload;
    if (! m_running) { return msg; }
    if (DisseminationCache.requestSeqno [dpMsg->key]() != 
	 DISSEMINATION_SEQNO_UNKNOWN) {    
      sendObject (dpMsg->key);
    }
    return msg;
  }
