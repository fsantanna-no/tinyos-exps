#include <DisseminationEngine.h>

module DisseminationEngineImplP {
  provides interface StdControl;

  uses {
    interface DisseminationCache[uint16_t key];
    interface TrickleTimer[uint16_t key];
    interface StdControl as DisseminatorControl[uint16_t id];

    interface AMSend;
    interface Receive;

    interface AMSend as ProbeAMSend;
    interface Receive as ProbeReceive;

    interface Leds;
  }
}

implementation
{
    typedef int64_t  s64;
    typedef uint64_t u64;
    typedef int32_t  s32;
    typedef uint32_t u32;
    typedef int16_t  s16;
    typedef uint16_t u16;
    typedef int8_t    s8;
    typedef uint8_t   u8;

    enum {
        NUM_DISSEMINATORS = uniqueCount("DisseminationTimerC.TrickleTimer")
    };

/*
    #define DisseminationCache_start(i) \
                signal DisseminationCache.start[i]()
    #define DisseminationCache_stop(i) \
                signal DisseminationCache.stop[i]()
*/
    #define TrickleTimer_start(i) \
                call TrickleTimer.start[i]()
    #define TrickleTimer_stop(i) \
                call TrickleTimer.stop[i]()
    #define TrickleTimer_reset(i) \
                call TrickleTimer.reset[i]()
    #define TrickleTimer_incrementCounter(i) \
                call TrickleTimer.incrementCounter[i]()
    #define DisseminationCache_storeData(a,b,c,d) \
                call DisseminationCache.storeData[a](b,c,d)
    #define DisseminationCache_requestData(i,v) \
                call DisseminationCache.requestData[i](v)
    #define DisseminationCache_requestSeqno(i) \
                call DisseminationCache.requestSeqno[i]()
    #define ProbeAMSend_getPayload(msg,len) \
                call ProbeAMSend.getPayload(msg,len)
    #define ProbeAMSend_payloadLength(msg) \
                call ProbeAMSend.payloadLength(msg)
    #define ProbeAMSend_send(a,b,c) \
                call ProbeAMSend.send(a,b,c)
    #define AMSend_send(a,b,c)      \
                call AMSend.send(a,b,c)
    #define AMSend_maxPayloadLength(a) \
                call AMSend.maxPayloadLength(a)

    #include "_ceu_defs.h"
    #include "_ceu_code.cceu"

    command error_t StdControl.start() {
        uint8_t i;
        ceu_go_init();
        for ( i = 0; i < NUM_DISSEMINATORS; i++ ) {
            call DisseminatorControl.start[ i ]();
        }
        ceu_go_event(IN_DRIP_START, NULL);
        return SUCCESS;
    }

    command error_t StdControl.stop() {
        uint8_t i;
        for ( i = 0; i < NUM_DISSEMINATORS; i++ ) {
          call DisseminatorControl.stop[ i ]();
        }
        ceu_go_event(IN_DRIP_STOP, NULL);
        return SUCCESS;
    }

    event error_t DisseminationCache.start[ uint16_t key ]() {
        ceu_go_event(IN_DRIP_KEY_START, &key);
        return SUCCESS;
    }

    event error_t DisseminationCache.stop[ uint16_t key ]() {
        ceu_go_event(IN_DRIP_KEY_STOP, &key);
        return SUCCESS;
    }

    event void DisseminationCache.newData[ uint16_t key ]() {
        ceu_go_event(IN_DRIP_KEY_NEW, &key);
    }

    event void TrickleTimer.fired[ uint16_t key ]() {
        ceu_go_event(IN_DRIP_KEY_TRICKLE, &key);
    }

    event void ProbeAMSend.sendDone( message_t* msg, error_t error ) {
        ceu_go_event(IN_DRIP_SENDDONE, &error);
    }

    event void AMSend.sendDone( message_t* msg, error_t error ) {
        ceu_go_event(IN_DRIP_SENDDONE, &error);
    }

    event message_t* Receive.receive( message_t* msg, 
				    void* payload, 
				    uint8_t len ) {
        ceu_go_event(IN_DRIP_DATA_RECEIVE, msg);
        return msg;
    }

    event message_t* ProbeReceive.receive( message_t* msg, 
					 void* payload, 
					 uint8_t len) {
        ceu_go_event(IN_DRIP_PROBE_RECEIVE, msg);
        return msg;
    }
  
    default command void* 
        DisseminationCache.requestData[uint16_t key]( uint8_t* size ) { return NULL; }

    default command void 
        DisseminationCache.storeData[uint16_t key]( void* data, 
						                            uint8_t size, 
						                            uint32_t seqno ) {}

    default command uint32_t 
        DisseminationCache.requestSeqno[uint16_t key]() {
            return DISSEMINATION_SEQNO_UNKNOWN;
    }

    default command error_t TrickleTimer.start[uint16_t key]() {
        return FAIL;
    }

    default command void TrickleTimer.stop[uint16_t key]() { }

    default command void TrickleTimer.reset[uint16_t key]() { }

    default command void TrickleTimer.incrementCounter[uint16_t key]() { }

    default command error_t DisseminatorControl.start[uint16_t id]() { return FAIL; }
    default command error_t DisseminatorControl.stop[uint16_t id]() { return FAIL; }
}
