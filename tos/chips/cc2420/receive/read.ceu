@define(AWAIT, `
    var _cc_recv_readdone_t* t = await CC_RECV_READDONE;
    var _cc2420_header_t* header =
        _CC2420PacketBody_getHeader(_m_p_rx_buf);
    var u8 tmpLen = sizeof<_message_t> -
                    (_OFF1 - sizeof<_cc2420_header_t>);
    var u8* buf = <u8*> header;
    var u8 rxFrameLength = buf[ 0 ];
')

////////////////////
// case S_RX_LENGTH:
////////////////////

@AWAIT();
// m_state = S_RX_FCF;

if (rxFrameLength+1 > m_bytes_left) or (rxFrameLength > _MAC_PACKET_SIZE)
then
    // flush()
    _CSN_set();
    _CSN_clr();
    _SFLUSHRX_strobe();
    _SFLUSHRX_strobe();
    _CSN_set();
    // Length of this packet is bigger than the RXFIFO, flush it out.
    // Length is too large; we have to flush the entire Rx FIFO
    emit next;
end

if (not _FIFO_get()) and (not _FIFOP_get()) then
    m_bytes_left = m_bytes_left - (rxFrameLength + 1);
end

if rxFrameLength == 0 then
    // Length == 0; start reading the next packet
    _CSN_set();
    emit next;
end

if rxFrameLength > _SACK_HEADER_LENGTH then

    _RXFIFO_continueRead(&buf[1], _SACK_HEADER_LENGTH)
        finalize with nothing; end; // buf->_m_p_rx_buf (global)

    ////////////////////
    // case S_RX_FCF:
    ////////////////////
    do
        @AWAIT();
        //m_state = S_RX_PAYLOAD;

        if  _CC2420Config_isAutoAckEnabled()
        and (not _CC2420Config_isHwAutoAckDefault())
        and (((header:fcf >> _IEEE154_FCF_ACK_REQ) & 0x01) == 1)
        and (  (header:dest == _CC2420Config_getShortAddr())
            or (header:dest == _AM_BROADCAST_ADDR) )
        and (((header:fcf >> _IEEE154_FCF_FRAME_TYPE) & 7) ==
                _IEEE154_TYPE_DATA)
        then
            // CSn flippage cuts off our FIFO; SACK and begin reading again
            _CSN_set();
            _CSN_clr();
            _SACK_strobe();
            _CSN_set();
            _CSN_clr();
            _RXFIFO_beginRead(&buf[1+_SACK_HEADER_LENGTH],
                              rxFrameLength - _SACK_HEADER_LENGTH)
                finalize with nothing; end; // buf->_m_p_rx_buf (global)
        else
            _RXFIFO_continueRead(&buf[1+_SACK_HEADER_LENGTH],
                                 rxFrameLength - _SACK_HEADER_LENGTH)
                finalize with nothing; end; // buf->_m_p_rx_buf (global)
        end
    end

else
    // This is really a bad packet, skip FCF and get it out of here.
    //m_state = S_RX_PAYLOAD;
    _RXFIFO_continueRead(&buf[1], rxFrameLength)
        finalize with nothing; end; // buf->_m_p_rx_buf (global)
end

////////////////////
// case S_RX_PAYLOAD:
////////////////////

@AWAIT();

_CSN_set();

// new packet is buffered up, or we don't have timestamp in fifo, or ack
if (m_missed_packets>0 and _FIFO_get())
or (not _FIFOP_get())
or (_m_timestamp_size == 0)
or (rxFrameLength <= 10)
then
    _PacketTimeStamp_clear(_m_p_rx_buf);
else
    if _m_timestamp_size == 1 then
        _PacketTimeStamp_set(_m_p_rx_buf,
                             _m_timestamp_queue[ _m_timestamp_head ]);
    end

    _m_timestamp_head = ( _m_timestamp_head + 1 ) % _TIMESTAMP_QUEUE_SIZE;
    _m_timestamp_size = _m_timestamp_size - 1;

    if _m_timestamp_size > 0 then
        _PacketTimeStamp_clear(_m_p_rx_buf);
        _m_timestamp_head = 0;
        _m_timestamp_size = 0;
    end
end

// We may have received an ack that should be processed by Transmit
// buf[rxFrameLength] >> 7 checks the CRC

if (buf[ rxFrameLength ] >> 7) and t:rx_buf then
    var u8 type = ( header:fcf >> _IEEE154_FCF_FRAME_TYPE ) & 7;
    _CC2420Receive_receive(type, _m_p_rx_buf);
    if type == _IEEE154_TYPE_DATA then
        //post receiveDone_task();
        var _cc2420_metadata_t* metadata =
                _CC2420PacketBody_getMetadata(_m_p_rx_buf);
        var _cc2420_header_t* header =
                _CC2420PacketBody_getHeader(_m_p_rx_buf);
        var u8 length = header:length;
        var u8 tmpLen = sizeof<_message_t> -
                        (_OFF1 - sizeof<_cc2420_header_t>);
        var u8* buf = <u8*> header;

        metadata:crc = buf[ length ] >> 7;
        metadata:lqi = buf[ length ] & 0x7f;
        metadata:rssi = buf[ length - 1 ];

        if (_passesAddressCheck(_m_p_rx_buf) and length>=_CC2420_SIZE) then
            _m_p_rx_buf = _Receive_receive(_m_p_rx_buf, _m_p_rx_buf:data,
                                            length - _CC2420_SIZE);
        end
    end
end
