#include "IEEE802154.h"
#include "message.h"
#include "AM.h"

module CC2420ReceiveP @safe() {

  provides interface Init;
  provides interface StdControl;
  provides interface CC2420Receive;
  provides interface Receive;
  provides interface ReceiveIndicator as PacketIndicator;

  uses interface GeneralIO as CSN;
  uses interface GeneralIO as FIFO;
  uses interface GeneralIO as FIFOP;
  uses interface GpioInterrupt as InterruptFIFOP;

  uses interface Resource as SpiResource;
  uses interface CC2420Fifo as RXFIFO;
  uses interface CC2420Strobe as SACK;
  uses interface CC2420Strobe as SFLUSHRX;
  uses interface CC2420Packet;
  uses interface CC2420PacketBody;
  uses interface CC2420Config;
  uses interface PacketTimeStamp<T32khz,uint32_t>;

  uses interface CC2420Strobe as SRXDEC;
  uses interface CC2420Register as SECCTRL0;
  uses interface CC2420Register as SECCTRL1;
  uses interface CC2420Ram as KEY0;
  uses interface CC2420Ram as KEY1;
  uses interface CC2420Ram as RXNONCE;
  uses interface CC2420Ram as RXFIFO_RAM;
  uses interface CC2420Strobe as SNOP;

  uses interface Leds;
}

implementation
{
    typedef int64_t  s64;
    typedef uint64_t u64;
    typedef int32_t  s32;
    typedef uint32_t u32;
    typedef int16_t  s16;
    typedef uint16_t u16;
    typedef int8_t    s8;
    typedef uint8_t   u8;

    enum {
        RXFIFO_SIZE = 128,
        TIMESTAMP_QUEUE_SIZE = 8,
        SACK_HEADER_LENGTH = 7,
    };

    message_t  m_rx_buf;
    message_t* m_p_rx_buf = &m_rx_buf;

    uint32_t m_timestamp_queue[ TIMESTAMP_QUEUE_SIZE ];
    uint8_t  m_timestamp_head;
    uint8_t  m_timestamp_size;

    bool receivingPacket;
  
    typedef struct {
        uint8_t* rx_buf;
        uint8_t  rx_len;
        error_t  error;
    } cc_recv_readdone_t;

    #define CC2420PacketBody_getHeader(a) \
                call CC2420PacketBody.getHeader(a)
    #define CC2420PacketBody_getMetadata(a) \
                call CC2420PacketBody.getMetadata(a)
    #define CC2420Receive_receive(a,b) \
                signal CC2420Receive.receive(a,b)
    #define Receive_receive(a,b,c) \
                signal Receive.receive(a,b,c)
    #define PacketTimeStamp_set(a,b) \
                call PacketTimeStamp.set(a,b)
    #define PacketTimeStamp_clear(a) \
                call PacketTimeStamp.clear(a)
    #define CC2420Config_getShortAddr(a) \
                call CC2420Config.getShortAddr(a)
    #define CC2420Config_isAutoAckEnabled() \
                call CC2420Config.isAutoAckEnabled()
    #define CC2420Config_isHwAutoAckDefault() \
                call CC2420Config.isHwAutoAckDefault()
    #define CSN_clr() \
                call CSN.clr()
    #define CSN_set() \
                call CSN.set()
    #define FIFO_get() \
                call FIFO.get()
    #define FIFOP_get() \
                call FIFOP.get()
    #define InterruptFIFOP_enableFallingEdge() \
                call InterruptFIFOP.enableFallingEdge()
    #define InterruptFIFOP_disable() \
                call InterruptFIFOP.disable()
    #define RXFIFO_beginRead(a,b) \
                call RXFIFO.beginRead(a,b)
    #define RXFIFO_continueRead(a,b) \
                call RXFIFO.continueRead(a,b)
    #define SACK_strobe() \
                call SACK.strobe()
    #define SFLUSHRX_strobe() \
                call SFLUSHRX.strobe()
    #define SpiResource_immediateRequest() \
                call SpiResource.immediateRequest()
    #define SpiResource_isOwner() \
                call SpiResource.isOwner()
    #define SpiResource_release() \
                call SpiResource.release()
    #define SpiResource_request() \
                call SpiResource.request()

    bool passesAddressCheck(message_t *msg);

    #include "_ceu_defs.h"
    #include "_ceu_code.cceu"

    command error_t Init.init() {
        ceu_go_init();
        return SUCCESS;
    }

    command error_t StdControl.start() {
        ceu_go_event(IN_CC_RECV_START, NULL);
        return SUCCESS;
    }

    command error_t StdControl.stop() {
        ceu_go_event(IN_CC_RECV_STOP, NULL);
        return SUCCESS;
    }

    async event void InterruptFIFOP.fired() {
        ceu_go_event(IN_CC_RECV_FIFOP, NULL);
    }

    event void SpiResource.granted() {
        ceu_go_event(IN_CC_RECV_SPI_GRANTED, NULL);
    }

    async event void RXFIFO.readDone( uint8_t* rx_buf, uint8_t rx_len,
                                      error_t error ) {
        cc_recv_readdone_t t = { rx_buf, rx_len, error };
        ceu_go_event(IN_CC_RECV_READDONE, &t);
    }

///////////////////////////

  command bool PacketIndicator.isReceiving() {
    bool receiving;
    atomic {
      receiving = receivingPacket;
    }
    return receiving;
  }
  
  async event void RXFIFO.writeDone( uint8_t* tx_buf, uint8_t tx_len, error_t 
  error ) {
  }  
  
  event void CC2420Config.syncDone( error_t error ) {
  }
 
  bool passesAddressCheck(message_t *msg) {
    cc2420_header_t *header = call CC2420PacketBody.getHeader( msg );
    int mode = (header->fcf >> IEEE154_FCF_DEST_ADDR_MODE) & 3;
    ieee_eui64_t *ext_addr;  

    if(!(call CC2420Config.isAddressRecognitionEnabled())) {
      return TRUE;
    }

    if (mode == IEEE154_ADDR_SHORT) {
      return (header->dest == call CC2420Config.getShortAddr()
              || header->dest == IEEE154_BROADCAST_ADDR);
    } else if (mode == IEEE154_ADDR_EXT) {
      ieee_eui64_t local_addr = (call CC2420Config.getExtAddr());
      ext_addr = TCAST(ieee_eui64_t* ONE, &header->dest);
      return (memcmp(ext_addr->data, local_addr.data, IEEE_EUI64_LENGTH) == 0);
    } else {
      /* reject frames with either no address or invalid type */
      return FALSE;
    }
  }

  async command void CC2420Receive.sfd( uint32_t time ) {
    if ( m_timestamp_size < TIMESTAMP_QUEUE_SIZE ) {
      uint8_t tail =  ( ( m_timestamp_head + m_timestamp_size ) % 
                        TIMESTAMP_QUEUE_SIZE );
      m_timestamp_queue[ tail ] = time;
      m_timestamp_size++;
    }
  }

  async command void CC2420Receive.sfd_dropped() {
    if ( m_timestamp_size ) {
      m_timestamp_size--;
    }
  }

}
