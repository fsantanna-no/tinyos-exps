uint8_t m_missed_packets;
uint8_t rxFrameLength;
uint8_t m_bytes_left;
cc2420_receive_state_t m_state;
error_t Init.init () {
    m_p_rx_buf = & m_rx_buf;
}
error_t StdControl.start() {
    reset_state ();
    m_state = S_STARTED;
    receivingPacket = FALSE;
    InterruptFIFOP.enableFallingEdge ();
}
error_t StdControl.stop () {
    m_state = S_STOPPED;
    reset_state ();
    CSN.set ();
    InterruptFIFOP.disable ();
}
event void InterruptFIFOP.fired () {
    if ( m_state == S_STARTED ) {
        m_state = S_RX_LENGTH;
        beginReceive ();
    } else {
        m_missed_packets ++;
    }
}
event void SpiResource.granted () {
    receive ();
}
event void RXFIFO.readDone (uint8_t* rx_buf, uint8_t rx_len,
                                error_t error) {
    cc2420_header_t* header = CC2420PacketBody.getHeader (m_p_rx_buf);
    uint8_t tmpLen = sizeof (message_t) - (offsetof (message_t, data)
                            - sizeof (cc2420_header_t));
    uint8_t* buf = (uint8_t*) header;
    rxFrameLength = buf [0];
    switch (m_state) {
        case S_RX_LENGTH:
            m_state = S_RX_FCF;
            if (rxFrameLength + 1 > m_bytes_left) {
                flush ();
            } else {
                if (! FIFO.get () && ! FIFOP.get ()) {
                    m_bytes_left -= rxFrameLength + 1;
                }
                if (rxFrameLength <= MAC_PACKET_SIZE) {
                    if (rxFrameLength > 0) {
                        if (rxFrameLength > SACK_HEADER_LENGTH) {
                            RXFIFO.continueRead (buf + 1, SACK_HEADER_LENGTH);
                        } else {
                            m_state = S_RX_PAYLOAD;
                            RXFIFO.continueRead (buf + 1, rxFrameLength);
                        }
                    } else {
                        receivingPacket = FALSE;
                        CSN.set ();
                        SpiResource.release ();
                        waitForNextPacket ();
                    }
                } else {
                    flush ();
                }
            }
            break;
        case S_RX_FCF:
            m_state = S_RX_PAYLOAD;
            if (CC2420Config.isAutoAckEnabled () && !
                CC2420Config.isHwAutoAckDefault ()) {
                if ((((header->fcf >> IEEE154_FCF_ACK_REQ) & 0x01) == 1)
                && ((header->dest == CC2420Config.getShortAddr ())
                || (header->dest == AM_BROADCAST_ADDR))
                && (((header->fcf >> IEEE154_FCF_FRAME_TYPE) & 7) == IEEE154_TYPE_DATA)) {
                    CSN.set ();
                    CSN.clr ();
                    SACK.strobe ();
                    CSN.set ();
                    CSN.clr ();
                    RXFIFO.beginRead (buf + 1 + SACK_HEADER_LENGTH,
                                rxFrameLength - SACK_HEADER_LENGTH);
                    return;
                }
            }
            RXFIFO.continueRead (buf + 1 + SACK_HEADER_LENGTH,
                rxFrameLength - SACK_HEADER_LENGTH);
            break;
        case S_RX_PAYLOAD:
            CSN.set ();
            if (! m_missed_packets) {
                SpiResource.release ();
            }
            if ((m_missed_packets && FIFO.get ()) || ! FIFOP.get ()
            || ! m_timestamp_size
            || rxFrameLength <= 10) {
                PacketTimeStamp.clear(m_p_rx_buf);
            } else {
                if (m_timestamp_size == 1)
                    PacketTimeStamp.set (m_p_rx_buf,
                        m_timestamp_queue [m_timestamp_head]);
                m_timestamp_head = (m_timestamp_head + 1)
                                % TIMESTAMP_QUEUE_SIZE;
                m_timestamp_size --;
                if (m_timestamp_size > 0) {
                    PacketTimeStamp.clear (m_p_rx_buf);
                    m_timestamp_head = 0;
                    m_timestamp_size = 0;
                }
            }
            if ((buf [rxFrameLength] >> 7) && rx_buf) {
                uint8_t type = (header->fcf >> IEEE154_FCF_FRAME_TYPE) & 7;
                CC2420Receive.receive ( type, m_p_rx_buf );
                if (type == IEEE154_TYPE_DATA) {
                    receiveDone_task ();
                    receivingPacket = FALSE;
                    waitForNextPacket ();
                    return;
                }
            }
            waitForNextPacket ();
            break;
        default:
            receivingPacket = FALSE;
            CSN.set ();
            SpiResource.release ();
            break;
    }
}
void beginReceive () {
    m_state = S_RX_LENGTH;
    receivingPacket = TRUE;
    if (SpiResource.isOwner ()) {
        receive ();
    } else if (SpiResource.immediateRequest () == SUCCESS) {
        receive ();
    } else {
        SpiResource.request ();
    }
}
void flush () {
    reset_state ();
    CSN.set ();
    CSN.clr ();
    SFLUSHRX.strobe ();
    SFLUSHRX.strobe ();
    CSN.set ();
    SpiResource.release ();
    waitForNextPacket ();
}
void receive () {
    CSN.clr ();
    RXFIFO.beginRead ((uint8_t*) (CC2420PacketBody.getHeader (m_p_rx_buf)),
                        1);
}
void waitForNextPacket () {
    if (m_state == S_STOPPED) {
        SpiResource.release ();
        return;
    }
    receivingPacket = FALSE;
    if ((m_missed_packets && FIFO.get ()) || ! FIFOP.get ()) {
        if (m_missed_packets) {
            m_missed_packets --;
        }
        beginReceive ();
    } else {
        m_state = S_STARTED;
        m_missed_packets = 0;
        SpiResource.release ();
    }
}
void reset_state () {
    m_bytes_left = RXFIFO_SIZE;
    receivingPacket = FALSE;
    m_timestamp_head = 0;
    m_timestamp_size = 0;
    m_missed_packets = 0;
  }
