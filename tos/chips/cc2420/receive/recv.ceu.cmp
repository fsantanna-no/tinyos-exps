loop do
    await CC_RECV_START;
    _InterruptFIFOP_enableFallingEdge ();
    par/or do
        await CC_RECV_STOP;
        _CSN_set ();
        _InterruptFIFOP_disable ();
    with
        event void next;
        loop do
            var u8 m_bytes_left = _RXFIFO_SIZE;
            _receivingPacket = _FALSE;
            _m_timestamp_head = 0;
            _m_timestamp_size = 0;
            var u8 m_missed_packets = 0;
            _SpiResource_release ();
            await CC_RECV_FIFOP;
            par/or do
                await next;
            with
                loop do
                    await CC_RECV_FIFOP;
                    m_missed_packets = m_missed_packets + 1;
                end
            with
                loop do
                    if (m_missed_packets > 0 and _FIFO_get ())
                    or (not _FIFOP_get ())
                    then
                        if m_missed_packets > 0 then
                            m_missed_packets = m_missed_packets - 1;
                        end
                    else
                        emit next;
                    end
                    _receivingPacket = _TRUE;
                    if not (_SpiResource_isOwner () or
                            _SpiResource_immediateRequest () == _SUCCESS)
                    then
                        _SpiResource_request ();
                        await CC_RECV_SPI_GRANTED;
                    end
                    _CSN_clr ();
                    _RXFIFO_beginRead (<u8*> _CC2420PacketBody_getHeader 
                        (_m_p_rx_buf), 1);
                end
            end
        end
    end
end
@define (AWAIT, `
    var _cc_recv_readdone_t* t = await CC_RECV_READDONE;
    var _cc2420_header_t* header =
        _CC2420PacketBody_getHeader (_m_p_rx_buf);
    var u8 tmpLen = sizeof <_message_t> -
                    (_OFF1 - sizeof <_cc2420_header_t>);
    var u8* buf = <u8*> header;
    var u8 rxFrameLength = buf [0];
')
@AWAIT ();
if (rxFrameLength + 1 > m_bytes_left)
or (rxFrameLength > _MAC_PACKET_SIZE)
then
    _CSN_set ();
    _CSN_clr ();
    _SFLUSHRX_strobe ();
    _SFLUSHRX_strobe ();
    _CSN_set ();
    emit next;
end
if (not _FIFO_get ()) and (not _FIFOP_get ()) then
    m_bytes_left = m_bytes_left - (rxFrameLength + 1);
end
if rxFrameLength == 0 then
    _CSN_set ();
    emit next;
end
if rxFrameLength > _SACK_HEADER_LENGTH then
    _RXFIFO_continueRead (& buf [1], _SACK_HEADER_LENGTH);
    do
        @AWAIT ();
        if  _CC2420Config_isAutoAckEnabled ()
        and (not _CC2420Config_isHwAutoAckDefault ())
        and (((header:fcf >> _IEEE154_FCF_ACK_REQ) & 0x01) == 1)
        and (  (header:dest == _CC2420Config_getShortAddr ())
            or (header:dest == _AM_BROADCAST_ADDR) )
        and (((header:fcf >> _IEEE154_FCF_FRAME_TYPE) & 7) ==
                _IEEE154_TYPE_DATA)
        then
            _CSN_set ();
            _CSN_clr ();
            _SACK_strobe ();
            _CSN_set ();
            _CSN_clr ();
            _RXFIFO_beginRead (& buf [1 + _SACK_HEADER_LENGTH],
                              rxFrameLength - _SACK_HEADER_LENGTH);
        else
            _RXFIFO_continueRead (& buf [1 + _SACK_HEADER_LENGTH],
                                 rxFrameLength - _SACK_HEADER_LENGTH);
        end
    end
else
    _RXFIFO_continueRead (& buf [1], rxFrameLength);
end
@AWAIT ();
_CSN_set ();
if (m_missed_packets > 0 and _FIFO_get ())
or (not _FIFOP_get ())
or (_m_timestamp_size == 0)
or (rxFrameLength <= 10)
then
    _PacketTimeStamp_clear (_m_p_rx_buf);
else
    if _m_timestamp_size == 1 then
        _PacketTimeStamp_set (_m_p_rx_buf,
                             _m_timestamp_queue [_m_timestamp_head]);
    end
    _m_timestamp_head = (_m_timestamp_head + 1) % _TIMESTAMP_QUEUE_SIZE;
    _m_timestamp_size = _m_timestamp_size - 1;
    if _m_timestamp_size > 0 then
        _PacketTimeStamp_clear (_m_p_rx_buf);
        _m_timestamp_head = 0;
        _m_timestamp_size = 0;
    end
end
if (buf [rxFrameLength] >> 7) and t:rx_buf then
    var u8 type = (header:fcf >> _IEEE154_FCF_FRAME_TYPE) & 7;
    _CC2420Receive_receive (type, _m_p_rx_buf);
    if type == _IEEE154_TYPE_DATA then
        var _cc2420_metadata_t* metadata =
                _CC2420PacketBody_getMetadata (_m_p_rx_buf);
        var _cc2420_header_t* header =
                _CC2420PacketBody_getHeader (_m_p_rx_buf);
        var u8 length = header:length;
        var u8 tmpLen = sizeof <_message_t> -
                        (_OFF1 - sizeof <_cc2420_header_t>);
        var u8* buf = <u8*> header;
        metadata:crc = buf [length] >> 7;
        metadata:lqi = buf [length] & 0x7f;
        metadata:rssi = buf [length - 1];
        if (_passesAddressCheck (_m_p_rx_buf) and length >= _CC2420_SIZE) then
            _m_p_rx_buf = _Receive_receive (_m_p_rx_buf, _m_p_rx_buf:data,
                                            length - _CC2420_SIZE);
        end
    end
end
